version: '3.8'

services:
  # SQL Server Database
  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${VCDEVTOOL_DB_SA_PASSWORD:-VCDevTool2024!}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - vcdevtool_db_data:/var/opt/mssql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - vcdevtool-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${VCDEVTOOL_DB_SA_PASSWORD:-VCDevTool2024!} -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # VCDevTool API
  api:
    build:
      context: .
      dockerfile: VCDevTool.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5289
      - VCDEVTOOL_DB_SERVER=database
      - VCDEVTOOL_DB_NAME=VCDevToolDb
      - VCDEVTOOL_DB_USER=vcdevtool_user
      - VCDEVTOOL_DB_PASSWORD=${VCDEVTOOL_DB_PASSWORD:-SecurePassword123!}
      - VCDEVTOOL_JWT_SECRET=${VCDEVTOOL_JWT_SECRET:-VCDevTool-Production-Secret-Key-Change-This-32-Characters-Minimum-123456789}
      - VCDEVTOOL_ALLOWED_ORIGIN_1=${VCDEVTOOL_ALLOWED_ORIGIN_1:-https://localhost:3000}
      - VCDEVTOOL_ALLOWED_ORIGIN_2=${VCDEVTOOL_ALLOWED_ORIGIN_2:-https://vcdevtool.local}
      - VCDEVTOOL_ALLOWED_HOSTS=${VCDEVTOOL_ALLOWED_HOSTS:-localhost;vcdevtool.local;*.vcdevtool.local}
    ports:
      - "5289:5289"
    volumes:
      - vcdevtool_logs:/var/log/vcdevtool
      - vcdevtool_uploads:/app/uploads
      - vcdevtool_updates:/app/updates
    networks:
      - vcdevtool-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5289/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - vcdevtool_logs:/var/log/nginx
    networks:
      - vcdevtool-network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Redis Cache (Optional - for future scaling)
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-VCDevToolRedis2024!}
    ports:
      - "6379:6379"
    volumes:
      - vcdevtool_redis_data:/data
    networks:
      - vcdevtool-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

volumes:
  vcdevtool_db_data:
    driver: local
  vcdevtool_logs:
    driver: local
  vcdevtool_uploads:
    driver: local
  vcdevtool_updates:
    driver: local
  vcdevtool_redis_data:
    driver: local

networks:
  vcdevtool-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 